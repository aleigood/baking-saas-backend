// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// ================================================================= //
//                            ENUMS                                  //
// ================================================================= //

// [核心新增] 新增配方品类枚举，用于区分不同类型的烘焙产品
enum RecipeCategory {
  BREAD // 面包类 (将强制执行烘焙百分比验证)
  PASTRY // 西点类
  DESSERT // 甜品类
  DRINK // 饮品类
  OTHER // 其他
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// 店铺状态枚举
enum TenantStatus {
  ACTIVE
  INACTIVE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ProductionTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum IngredientType {
  STANDARD // 标准原料，需要追踪库存和成本
  UNTRACKED // 非追踪原料，如水、盐等低价值或难计量的
}

// 新增：配方类型枚举
// 用于区分是主配方、预制面团还是馅料等附加项
enum RecipeType {
  MAIN // 主面团配方，包含最终产品
  PRE_DOUGH // 预制面团/面种配方，如烫种、波兰种
  EXTRA // 馅料/表面装饰等附加配方，如卡仕达酱
}

// 新增：产品中的原料类型枚举
// 用于区分产品中的原料是搅拌加入、作为馅料还是表面装饰
enum ProductIngredientType {
  MIX_IN // 搅拌时加入的原料 (如香草籽)
  FILLING // 包入的馅料 (如卡仕达酱)
  TOPPING // 表面装饰 (如芝士粉)
}

// 定义原料SKU的启用状态
enum SkuStatus {
  ACTIVE // 启用
  INACTIVE // 未启用
}

// ================================================================= //
//                         CORE AUTH & TENANCY                       //
// ================================================================= //

// 用户账户模型
model User {
  id                 String                      @id @default(uuid())
  phone              String                      @unique
  name               String? // [新增] 用户姓名 (New: User's name)
  avatarUrl          String? // [核心新增] 用户头像URL
  password           String
  role               Role                        @default(MEMBER) // Global role, SUPER_ADMIN is highest
  status             UserStatus                  @default(ACTIVE)
  createdAt          DateTime                    @default(now())
  updatedAt          DateTime                    @updatedAt
  tenants            TenantUser[] // User can belong to multiple tenants
  stockAdjustments   IngredientStockAdjustment[]
  // [核心新增] 新增与采购记录的关联
  procurementRecords ProcurementRecord[]
  createdTasks       ProductionTask[] // [核心新增] 关联到该用户创建的生产任务
}

// 租户/店铺模型
model Tenant {
  id              String           @id @default(uuid())
  name            String
  // status 字段来管理店铺状态
  status          TenantStatus     @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  members         TenantUser[]
  invitations     Invitation[]
  ingredients     Ingredient[]
  recipeFamilies  RecipeFamily[] // 一个店铺可以有多个配方族
  productionTasks ProductionTask[] // 一个店铺可以有多个生产任务
}

// 用户与租户的多对多关系表
model TenantUser {
  userId   String
  tenantId String
  role     Role       @default(MEMBER) // Role within the tenant
  status   UserStatus @default(PENDING) // Status within the tenant
  user     User       @relation(fields: [userId], references: [id])
  tenant   Tenant     @relation(fields: [tenantId], references: [id])

  @@id([userId, tenantId])
}

// 邀请模型
model Invitation {
  id        String           @id @default(uuid())
  tenantId  String
  tenant    Tenant           @relation(fields: [tenantId], references: [id])
  phone     String
  role      Role
  status    InvitationStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([tenantId, phone])
}

// ================================================================= //
//                           RECIPE MODELS                       //
// ================================================================= //

// 配方族：用于管理一个配方的所有版本
// 例如，“甜面团”是一个Family，它可能有V1, V2等多个Version
model RecipeFamily {
  id               String                @id @default(uuid())
  name             String // 配方名称，如“甜面团”、“烫种”
  tenantId         String
  type             RecipeType // 配方类型 (主配方, 预制面团, 或附加项)
  category         RecipeCategory        @default(BREAD) // [核心新增] 配方品类
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  deletedAt        DateTime?
  tenant           Tenant                @relation(fields: [tenantId], references: [id])
  versions         RecipeVersion[] // 一个配方族包含多个版本
  // 当此配方作为预制面团在其他配方中使用时
  usedInComponents ComponentIngredient[] @relation("PreDoughLink") // [核心重命名] usedInDoughs -> usedInComponents
  // 当此配方作为附加项(馅料/装饰)在其他配方中使用时
  usedInProducts   ProductIngredient[]   @relation("ExtraLink")

  @@unique([tenantId, name, deletedAt])
  @@index([tenantId])
}

// 配方版本：记录配方的具体版本信息
model RecipeVersion {
  id         String            @id @default(uuid())
  familyId   String // 所属配方族ID
  version    Int // 版本号
  notes      String? // 版本备注，如“夏季版，减少水量”
  isActive   Boolean           @default(true) // 是否为当前激活版本
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  family     RecipeFamily      @relation(fields: [familyId], references: [id], onDelete: Cascade)
  components RecipeComponent[] // [核心重命名] doughs -> components
  products   Product[] // 该版本包含的最终产品 (仅MAIN类型的配方有)

  @@unique([familyId, version])
  @@index([familyId])
}

// [核心重命名] Dough -> RecipeComponent，使其成为一个更通用的配方组件模型
model RecipeComponent {
  id              String                @id @default(uuid())
  recipeVersionId String // 所属配方版本ID
  name            String // 组件名称，如“主面团”、“烫种”、“卡仕达酱”
  targetTemp      Decimal? // [核心修改] 出缸温度
  lossRatio       Decimal               @default(0) // [核心修改] 损耗率
  procedure       String[] // 制作流程要点
  recipeVersion   RecipeVersion         @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)
  ingredients     ComponentIngredient[] // 组件包含的原料

  @@index([recipeVersionId])
}

// [核心重命名] DoughIngredient -> ComponentIngredient
model ComponentIngredient {
  id               String          @id @default(uuid())
  componentId      String // [核心重命名] doughId -> componentId
  ratio            Decimal?
  flourRatio       Decimal?
  ingredientId     String? // [核心修改] 用于关联Ingredient模型
  ingredient       Ingredient?     @relation(fields: [ingredientId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  linkedPreDoughId String?
  component        RecipeComponent @relation(fields: [componentId], references: [id], onDelete: Cascade) // [核心重命名] dough -> component
  linkedPreDough   RecipeFamily?   @relation("PreDoughLink", fields: [linkedPreDoughId], references: [id])

  @@index([componentId]) // [核心重命名] doughId -> componentId
  @@index([linkedPreDoughId])
  @@index([ingredientId])
}

// 最终产品：由配方制作出的具体面包或产品
model Product {
  id                 String                            @id @default(uuid())
  recipeVersionId    String // 所属配方版本ID
  name               String // 产品名称，如“熊掌卡仕达”
  baseDoughWeight    Decimal // [核心修改] 基础面团克重
  procedure          String[] // 制作流程要点 (如烘烤参数)
  recipeVersion      RecipeVersion                     @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)
  ingredients        ProductIngredient[] // 产品的附加原料 (搅拌、馅料、装饰)
  productionTasks    ProductionTaskItem[]
  spoilageLogs       ProductionTaskSpoilageLog[]
  overproductionLogs ProductionTaskOverproductionLog[]

  @@index([recipeVersionId])
}

// 产品的附加原料：搅拌、馅料、装饰
model ProductIngredient {
  id            String                @id @default(uuid())
  productId     String // 所属产品ID
  type          ProductIngredientType // 原料类型 (搅拌/馅料/装饰)
  ingredientId  String? // [核心修改] 用于关联Ingredient模型
  ingredient    Ingredient?           @relation(fields: [ingredientId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  ratio         Decimal?
  weightInGrams Decimal? // [核心修改] 馅料/装饰类原料，单位克
  linkedExtraId String?
  product       Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  linkedExtra   RecipeFamily?         @relation("ExtraLink", fields: [linkedExtraId], references: [id])

  @@index([productId])
  @@index([linkedExtraId])
  @@index([ingredientId])
}

// ================================================================= //
//                  INGREDIENTS & STOCK           //
// ================================================================= //

// 原料品类模型
model Ingredient {
  id                   String                      @id @default(uuid())
  tenantId             String
  name                 String // e.g., "High-gluten flour"
  type                 IngredientType              @default(STANDARD)
  isFlour              Boolean                     @default(false)
  waterContent         Decimal                     @default(0) // [核心修改] 含水量
  activeSkuId          String?
  currentStockInGrams  Decimal                     @default(0) // [核心修改] 当前库存克重
  currentStockValue    Decimal                     @default(0)
  createdAt            DateTime                    @default(now())
  updatedAt            DateTime                    @updatedAt
  deletedAt            DateTime?
  tenant               Tenant                      @relation(fields: [tenantId], references: [id])
  skus                 IngredientSKU[]
  consumptionLogs      IngredientConsumptionLog[]
  activeSku            IngredientSKU?              @relation("ActiveSKU", fields: [activeSkuId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  componentIngredients ComponentIngredient[] // [核心重命名] doughIngredients -> componentIngredients
  productIngredients   ProductIngredient[]
  stockAdjustments     IngredientStockAdjustment[]

  @@unique([tenantId, name, deletedAt])
}

// 原料SKU模型
model IngredientSKU {
  id                   String                     @id @default(uuid())
  brand                String?
  specName             String // e.g., "1kg bag"
  specWeightInGrams    Decimal // [核心修改] 规格克重
  ingredientId         String
  status               SkuStatus                  @default(INACTIVE)
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  ingredient           Ingredient                 @relation(fields: [ingredientId], references: [id])
  procurementRecords   ProcurementRecord[]
  consumptionLogs      IngredientConsumptionLog[]
  activeForIngredients Ingredient[]               @relation("ActiveSKU")
}

// 采购记录模型
model ProcurementRecord {
  id                String        @id @default(uuid())
  skuId             String
  packagesPurchased Int
  pricePerPackage   Decimal
  purchaseDate      DateTime      @default(now())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  sku               IngredientSKU @relation(fields: [skuId], references: [id])

  @@index([userId])
}

// 库存调整日志模型
model IngredientStockAdjustment {
  id            String     @id @default(uuid())
  ingredientId  String
  userId        String // 操作人ID
  changeInGrams Decimal // [核心修改] 变化量
  reason        String? // 调整原因, 如 "月度盘点", "过期损耗", "报溢" 等
  createdAt     DateTime   @default(now())
  ingredient    Ingredient @relation(fields: [ingredientId], references: [id])
  user          User       @relation(fields: [userId], references: [id])

  @@index([ingredientId])
  @@index([userId])
}

// ================================================================= //
//                  PRODUCTION & TASKS              //
// ================================================================= //

// 生产任务模型
model ProductionTask {
  id          String               @id @default(uuid())
  tenantId    String
  status      ProductionTaskStatus @default(PENDING)
  startDate   DateTime
  endDate     DateTime?
  notes       String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?
  createdById String // [核心新增] 创建任务的用户ID
  createdBy   User                 @relation(fields: [createdById], references: [id])
  tenant      Tenant               @relation(fields: [tenantId], references: [id])
  log         ProductionLog?
  items       ProductionTaskItem[]

  @@index([tenantId])
  @@index([createdById]) // [核心新增] 为创建者ID添加索引
}

// 生产任务清单项 (中间表)
model ProductionTaskItem {
  id        String         @id @default(uuid())
  taskId    String
  productId String
  quantity  Int
  task      ProductionTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([productId])
}

// ================================================================= //
//                  PRODUCTION LOGS & CONSUMPTION                    //
// ================================================================= //

// 生产日志模型
model ProductionLog {
  id                 String                            @id @default(uuid())
  taskId             String                            @unique
  completedAt        DateTime                          @default(now())
  notes              String?
  recipeSnapshot     Json?
  task               ProductionTask                    @relation(fields: [taskId], references: [id])
  consumptionLogs    IngredientConsumptionLog[]
  spoilageLogs       ProductionTaskSpoilageLog[]
  overproductionLogs ProductionTaskOverproductionLog[]

  @@index([taskId])
}

// 生产任务损耗日志模型
model ProductionTaskSpoilageLog {
  id              String        @id @default(uuid())
  productionLogId String
  productId       String
  stage           String // e.g., 'kneading', 'fermentation', 'baking'
  quantity        Int
  notes           String?
  createdAt       DateTime      @default(now())
  productionLog   ProductionLog @relation(fields: [productionLogId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productionLogId])
  @@index([productId])
}

// 新增超量生产日志模型
model ProductionTaskOverproductionLog {
  id              String        @id @default(uuid())
  productionLogId String
  productId       String
  quantity        Int // 超产数量
  createdAt       DateTime      @default(now())
  productionLog   ProductionLog @relation(fields: [productionLogId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productionLogId])
  @@index([productId])
}

// 原料消耗日志模型
model IngredientConsumptionLog {
  id              String         @id @default(uuid())
  productionLogId String
  ingredientId    String
  skuId           String?
  quantityInGrams Decimal // [核心修改] 消耗克重
  productionLog   ProductionLog  @relation(fields: [productionLogId], references: [id])
  ingredient      Ingredient     @relation(fields: [ingredientId], references: [id])
  sku             IngredientSKU? @relation(fields: [skuId], references: [id])

  @@index([productionLogId])
  @@index([ingredientId])
  @@index([skuId])
}
