// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

// ================================================================= //
//                            ENUMS                                  //
// ================================================================= //

enum Role {
  OWNER
  ADMIN
  MEMBER
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

// 店铺状态枚举
enum TenantStatus {
  ACTIVE
  INACTIVE
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ProductionTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum IngredientType {
  STANDARD // 标准原料，需要追踪库存和成本
  UNTRACKED // 非追踪原料，如水、盐等低价值或难计量的
}

// 新增：配方类型枚举
// 用于区分是主配方、预制面团还是馅料等附加项
enum RecipeType {
  MAIN // 主面团配方，包含最终产品
  PRE_DOUGH // 预制面团/面种配方，如烫种、波兰种
  EXTRA // 馅料/表面装饰等附加配方，如卡仕达酱
}

// 新增：产品中的原料类型枚举
// 用于区分产品中的原料是搅拌加入、作为馅料还是表面装饰
enum ProductIngredientType {
  MIX_IN // 搅拌时加入的原料 (如香草籽)
  FILLING // 包入的馅料 (如卡仕达酱)
  TOPPING // 表面装饰 (如芝士粉)
}

// 定义原料SKU的启用状态
enum SkuStatus {
  ACTIVE // 启用
  INACTIVE // 未启用
}

// ================================================================= //
//                         CORE AUTH & TENANCY                       //
// ================================================================= //

// 用户账户模型
model User {
  id        String       @id @default(uuid())
  phone     String       @unique
  name      String? // [新增] 用户姓名 (New: User's name)
  password  String
  role      Role         @default(MEMBER) // Global role, SUPER_ADMIN is highest
  status    UserStatus   @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  tenants   TenantUser[] // User can belong to multiple tenants
}

// 租户/店铺模型
model Tenant {
  id              String           @id @default(uuid())
  name            String
  // status 字段来管理店铺状态
  status          TenantStatus     @default(ACTIVE)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  members         TenantUser[]
  invitations     Invitation[]
  ingredients     Ingredient[]
  recipeFamilies  RecipeFamily[] // 一个店铺可以有多个配方族
  productionTasks ProductionTask[] // 一个店铺可以有多个生产任务
}

// 用户与租户的多对多关系表
model TenantUser {
  userId   String
  tenantId String
  role     Role       @default(MEMBER) // Role within the tenant
  status   UserStatus @default(PENDING) // Status within the tenant
  user     User       @relation(fields: [userId], references: [id])
  tenant   Tenant     @relation(fields: [tenantId], references: [id])

  @@id([userId, tenantId])
}

// 邀请模型
model Invitation {
  id        String           @id @default(uuid())
  tenantId  String
  tenant    Tenant           @relation(fields: [tenantId], references: [id])
  phone     String
  role      Role
  status    InvitationStatus @default(PENDING)
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@unique([tenantId, phone])
}

// ================================================================= //
//                         RECIPE MODELS                       //
// ================================================================= //

// 配方族：用于管理一个配方的所有版本
// 例如，“甜面团”是一个Family，它可能有V1, V2等多个Version
model RecipeFamily {
  id        String     @id @default(uuid())
  name      String // 配方名称，如“甜面团”、“烫种”
  tenantId  String
  type      RecipeType // 配方类型 (主配方, 预制面团, 或附加项)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?

  tenant   Tenant          @relation(fields: [tenantId], references: [id])
  versions RecipeVersion[] // 一个配方族包含多个版本

  // 当此配方作为预制面团在其他配方中使用时
  usedInDoughs   DoughIngredient[]   @relation("PreDoughLink")
  // 当此配方作为附加项(馅料/装饰)在其他配方中使用时
  usedInProducts ProductIngredient[] @relation("ExtraLink")

  @@unique([tenantId, name, deletedAt])
  @@index([tenantId])
}

// 配方版本：记录配方的具体版本信息
model RecipeVersion {
  id        String   @id @default(uuid())
  familyId  String // 所属配方族ID
  version   Int // 版本号
  notes     String? // 版本备注，如“夏季版，减少水量”
  isActive  Boolean  @default(true) // 是否为当前激活版本
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  family   RecipeFamily @relation(fields: [familyId], references: [id], onDelete: Cascade)
  doughs   Dough[] // 该版本包含的面团 (可以是主面团、预制面团等)
  products Product[] // 该版本包含的最终产品 (仅MAIN类型的配方有)

  @@unique([familyId, version])
  @@index([familyId])
}

// 面团：配方版本中的一个组成部分，如主面团、烫种等
model Dough {
  id              String   @id @default(uuid())
  recipeVersionId String // 所属配方版本ID
  name            String // 面团名称，如“主面团”、“烫种”
  targetTemp      Float? // 出缸温度
  lossRatio       Float    @default(0) // 损耗率
  procedure       String[] // 制作流程要点

  recipeVersion RecipeVersion     @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)
  ingredients   DoughIngredient[] // 面团包含的原料

  @@index([recipeVersionId])
}

// 面团中的原料
model DoughIngredient {
  id      String @id @default(uuid())
  doughId String // 所属面团ID
  name    String // 原料名称
  ratio   Float // 基于总面粉的百分比

  // 如果这个原料本身是一个预制面团配方，这里会有关联
  linkedPreDoughId String?

  dough          Dough         @relation(fields: [doughId], references: [id], onDelete: Cascade)
  // 关联到作为预制面团的配方族
  linkedPreDough RecipeFamily? @relation("PreDoughLink", fields: [linkedPreDoughId], references: [id])

  @@index([doughId])
  @@index([linkedPreDoughId])
}

// 最终产品：由配方制作出的具体面包或产品
model Product {
  id              String   @id @default(uuid())
  recipeVersionId String // 所属配方版本ID
  name            String // 产品名称，如“熊掌卡仕达”
  baseDoughWeight Float // 基础面团克重 (不含mixIn)
  procedure       String[] // 制作流程要点 (如烘烤参数)

  recipeVersion   RecipeVersion        @relation(fields: [recipeVersionId], references: [id], onDelete: Cascade)
  ingredients     ProductIngredient[] // 产品的附加原料 (搅拌、馅料、装饰)
  productionTasks ProductionTaskItem[] // [修改] 关联到生产任务清单项

  @@index([recipeVersionId])
}

// 产品的附加原料：搅拌、馅料、装饰
model ProductIngredient {
  id        String                @id @default(uuid())
  productId String // 所属产品ID
  name      String // 原料名称
  type      ProductIngredientType // 原料类型 (搅拌/馅料/装饰)

  // 根据类型不同，单位也不同
  ratio         Float? // 搅拌类(MIX_IN)原料，基于总面粉的百分比
  weightInGrams Float? // 馅料(FILLING)或装饰(TOPPING)类原料，单位克

  // 如果这个原料本身是一个附加配方(如卡仕达酱)，这里会有关联
  linkedExtraId String?

  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  // 关联到作为附加项的配方族
  linkedExtra RecipeFamily? @relation("ExtraLink", fields: [linkedExtraId], references: [id])

  @@index([productId])
  @@index([linkedExtraId])
}

// ================================================================= //
//                  INGREDIENTS & STOCK           //
// ================================================================= //

// 原料品类模型
model Ingredient {
  id                  String         @id @default(uuid())
  tenantId            String
  name                String // e.g., "High-gluten flour"
  type                IngredientType @default(STANDARD)
  isFlour             Boolean        @default(false)
  waterContent        Float          @default(0)
  activeSkuId         String?
  currentStockInGrams Float          @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  tenant          Tenant                     @relation(fields: [tenantId], references: [id])
  skus            IngredientSKU[]
  consumptionLogs IngredientConsumptionLog[]
  activeSku       IngredientSKU?             @relation("ActiveSKU", fields: [activeSkuId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@unique([tenantId, name, deletedAt])
}

// 原料SKU模型
model IngredientSKU {
  id                String    @id @default(uuid())
  brand             String?
  specName          String // e.g., "1kg bag"
  specWeightInGrams Float
  ingredientId      String
  status            SkuStatus @default(INACTIVE)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  ingredient           Ingredient                 @relation(fields: [ingredientId], references: [id])
  procurementRecords   ProcurementRecord[]
  consumptionLogs      IngredientConsumptionLog[]
  activeForIngredients Ingredient[]               @relation("ActiveSKU")
}

// 采购记录模型
model ProcurementRecord {
  id                String   @id @default(uuid())
  skuId             String
  packagesPurchased Int
  pricePerPackage   Decimal
  purchaseDate      DateTime @default(now())

  sku IngredientSKU @relation(fields: [skuId], references: [id])
}

// ================================================================= //
//                  PRODUCTION & TASKS              //
// ================================================================= //

// 生产任务模型
model ProductionTask {
  id          String               @id @default(uuid())
  tenantId    String
  status      ProductionTaskStatus @default(PENDING)
  plannedDate DateTime
  notes       String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?

  tenant Tenant               @relation(fields: [tenantId], references: [id])
  log    ProductionLog?
  items  ProductionTaskItem[]

  @@index([tenantId])
}

// 生产任务清单项 (中间表)
model ProductionTaskItem {
  id        String @id @default(uuid())
  taskId    String
  productId String
  quantity  Int

  task    ProductionTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  product Product        @relation(fields: [productId], references: [id])

  @@index([taskId])
  @@index([productId])
}

// ================================================================= //
//                  PRODUCTION LOGS & CONSUMPTION                    //
// ================================================================= //

// 生产日志模型
model ProductionLog {
  id          String   @id @default(uuid())
  taskId      String   @unique
  completedAt DateTime @default(now())
  notes       String?

  task            ProductionTask             @relation(fields: [taskId], references: [id])
  consumptionLogs IngredientConsumptionLog[]

  @@index([taskId])
}

// 原料消耗日志模型
model IngredientConsumptionLog {
  id              String  @id @default(uuid())
  productionLogId String
  ingredientId    String
  skuId           String?
  quantityInGrams Float

  productionLog ProductionLog  @relation(fields: [productionLogId], references: [id])
  ingredient    Ingredient     @relation(fields: [ingredientId], references: [id])
  sku           IngredientSKU? @relation(fields: [skuId], references: [id])

  @@index([productionLogId])
  @@index([ingredientId])
  @@index([skuId])
}
